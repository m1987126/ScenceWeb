# -*- coding: utf-8 -*-"""Created on Sat Nov  3 20:29:48 2018@author: Administrator"""import requestsimport jsonimport re, time, importlibfrom concurrent import futuresfrom urllib.parse import urlencode"景区实时客流量数据"class GetJINGQU(object):    instance = None    instance_flag = False    def __new__(cls, *args, **kwargs):        if not cls.instance:            cls.instance = super().__new__(cls)            print("new")        return cls.instance    def __init__(self):        if not GetJINGQU.instance_flag:            GetJINGQU.instance_flag = True            self.headers = {                'Host': 'jiaotong.baidu.com',                'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 UBrowser/6.2.4094.1 Safari/537.36'            }            self.s = requests.Session()            self.Database = importlib.import_module("Scenic.models")    # ---该功能用在上线时数据库全面更新，谨慎调用    def begin(self):        item = ['0',                '18',                '25',                '53',                '75',                '131',                '132',                '167',                '179',                '257',                '289',                '340']        pool = futures.ThreadPoolExecutor(4)        l = []        for it in item:            l.append(it)        pool.map(self.LoadScenic, l)    # 获取市的所有景点数据    def LoadScenic(self, CityPid):        self.date = time.strftime("%y-%m-%d", time.localtime())  # 记录日期        pre_url = 'http://jiaotong.baidu.com/trafficindex/dashboard/arealist?'        u = {            'type': '1',            'area_type': '1',            'admin_code': CityPid        }        url = pre_url + urlencode(u)        data = self.s.get(url=url, headers=self.headers)        try:            g = json.loads(data.text)        except Exception:            p = re.compile("\((.*?)\)", re.S)            data = re.search(p, data.text)            g = json.loads(data.group(1))        for item in g['data']['list']:            name = item['display_name']  # 景区名            pid = item['area_id']  # 景区PID            self.Get_PassengerFlowInformation(pid)    # 获取今天到目前为止所有客流数据-    def Get_PassengerFlowInformation(self, pid):        # type键 1 表示今天 2 表示昨天 3表示最近的节日        pre_url = 'http://jiaotong.baidu.com/trafficindex/dashboard/curve?'        u = {            'type': '1',            "area_type": "1",            'area_id': str(pid)        }        url = pre_url + urlencode(u)        data = self.s.get(url=url, headers=self.headers)        try:            g = json.loads(data.content)        except Exception:            p = re.compile("\((.*?)\)", re.S)            data = re.search(p, data.text)            g = json.loads(data.group(1))        # ['真实流量'，'时间']        # 动态加载数据库        data = g['data']['list']        DataName = "PID_" + pid + "_People_Num"        Base = getattr(self.Database, DataName)  # 类        obj = Base.objects.last()        if obj.date == data[-1]['data_time'] and obj is not None:            print("skip")            return        for item in data:            D = Base(date=item['data_time'], num=int(item['count']))            D.save()    # 获取地理信息    def Get_GeographicInformation(self, pid):        h = 'http://jiaotong.baidu.com/trafficindex/dashboard/arealist?'        u = {            'type': '1',            'area_type': '1',            'admin_code': pid        }        url = h + urlencode(u)        data = self.s.get(url=url, headers=self.headers)        try:            g = json.loads(data.text)        except Exception:            p = re.compile("\((.*?)\)", re.S)            data = re.search(p, data.text)            g = json.loads(data.group(1))        for item in g['data']['list']:            l = []            name = item['display_name']            pid = item['area_id']            location = item['location'].split(',')            lon = location[0]  # 地理经度            lat = location[1]  # 地理纬度            l.append(name)  # 景区名字            l.append(pid)  # pid            l.append(lon)            l.append(lat)    # 删除所有数据，上线前务必先把所有数据删除了    def deleteAll(self, pid):        DataName = "PID_" + pid + "_People_Num"        Base = getattr(self.Database, DataName)  # 类        try:            for i in Base.objects.all():                i.delete()        except Exception as e:            print(e)    # 更新数据库    def update_PassengerFlowInformation(self, pid):        # type键 1 表示今天 2 表示昨天 3表示最近的节日        pre_url = 'http://jiaotong.baidu.com/trafficindex/dashboard/curve?'        u = {            'type': '1',            "area_type": "1",            'area_id': pid        }        url = pre_url + urlencode(u)        data = self.s.get(url=url, headers=self.headers)        try:            g = json.loads(data.text)        except Exception:            p = re.compile("\((.*?)\)", re.S)            data = re.search(p, data.text)            g = json.loads(data.group(1))        # ['真实流量'，'时间']        # 动态加载数据库        DataName = "PID_" + str(pid) + "_People_Num"        Base = getattr(self.Database, DataName)  # 类        l = []  # 存放流量        t = []  # 存放时间        # 取最后一个数据，判断是否有新数据，有的话添加，没有的话返回        d = Base.objects.last()        data = g['data']['list'][-1]        if d.date == data["data_time"]:            return        b = Base(date=data["data_time"], num=data["count"])        b.save()        # return {"data": l, "time": t}'''创建景区基本信息对象'''class Information(object):    def __init__(self, pid, name, cityCode, WeatherPid):        self.pid = pid  # pid        self.JingQuName = name  # 景区名字        self.cityCode = cityCode        self.WeatherPid = WeatherPid    def getInformation(self):        # return JingQu(self.pid,self.JingQuName,self.JingQuDescribe,self.ticketInformation,self.traffic_route,self.img_url,self.JingQuUrl)        return self